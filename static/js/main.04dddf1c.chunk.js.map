{"version":3,"sources":["Components/FeedbackOptions.js","Components/Section.js","Components/Notification.js","Components/Statistics.js","Components/App.js","index.js"],"names":["FeedbackEditor","onLeaveFeedback","onClick","Section","title","children","Notification","Statistics","good","neutral","bad","total","positivePercentage","styles","display","style","App","state","countTotalFeedback","Object","values","reduce","a","b","countPositiveFeedbackPercentage","addFeedback","field","setState","prevState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"2NAEe,SAASA,EAAT,GAA8C,IAApBC,EAAmB,EAAnBA,gBACvC,OACE,oCACE,4BAAQC,QAAS,kBAAMD,EAAgB,UAAvC,QACA,4BAAQC,QAAS,kBAAMD,EAAgB,aAAvC,WACA,4BAAQC,QAAS,kBAAMD,EAAgB,SAAvC,QCJN,IAOeE,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICJU,SAASC,IACtB,OACE,oCACE,kDCDS,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEMC,EAAS,CACbC,QAAS,SAEX,OACE,oCACE,0CACCH,EAAQ,EACP,oCACE,0BAAMI,MAAOF,GAAb,SAA4BL,GAC5B,0BAAMO,MAAOF,GAAb,YAA+BJ,GAC/B,0BAAMM,MAAOF,GAAb,QAA2BH,GAC3B,0BAAMK,MAAOF,GAAb,UAA6BF,GAC7B,0BAAMI,MAAOF,GAAb,eAAkCD,EAAlC,OAGF,kBAACN,EAAD,O,ICpBaU,E,4MACnBC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKH,OAAOI,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,M,EAGxDC,gCAAkC,WAChC,OAAQ,EAAKP,MAAMT,KAAO,EAAKU,qBAAwB,K,EAGzDO,YAAc,SAACC,GACb,EAAKC,UAAS,SAACC,GACb,OAAO,eACJF,EAAQE,EAAUF,GAAS,O,uDAMhC,OACE,oCACE,kBAAC,EAAD,CAAStB,MAAM,yBACb,kBAAC,EAAD,CAAiBH,gBAAiB4B,KAAKJ,cACvC,kBAAClB,EAAD,CACEC,KAAMqB,KAAKZ,MAAMT,KACjBC,QAASoB,KAAKZ,MAAMR,QACpBC,IAAKmB,KAAKZ,MAAMP,IAChBC,MAAOkB,KAAKX,qBACZN,mBAAoBiB,KAAKL,0C,GAjCJM,aCFjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.04dddf1c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function FeedbackEditor({ onLeaveFeedback }) {\r\n  return (\r\n    <>\r\n      <button onClick={() => onLeaveFeedback(\"good\")}>Good</button>\r\n      <button onClick={() => onLeaveFeedback(\"neutral\")}>Neutral</button>\r\n      <button onClick={() => onLeaveFeedback(\"bad\")}>Bad</button>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function Notification() {\r\n  return (\r\n    <>\r\n      <h2>No feedback given</h2>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Notification from \"./Notification\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  const styles = {\r\n    display: \"block\",\r\n  };\r\n  return (\r\n    <>\r\n      <h2>Statistics</h2>\r\n      {total > 0 ? (\r\n        <>\r\n          <span style={styles}>Good: {good}</span>\r\n          <span style={styles}>Neutral: {neutral}</span>\r\n          <span style={styles}>Bad: {bad}</span>\r\n          <span style={styles}>Total: {total}</span>\r\n          <span style={styles}>Percentage: {positivePercentage} %</span>\r\n        </>\r\n      ) : (\r\n        <Notification />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\n\nimport FeedbackOptions from \"./FeedbackOptions\";\nimport Section from \"./Section\";\nimport Statistics from \"./Statistics\";\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((a, b) => a + b);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return (this.state.good / this.countTotalFeedback()) * 100;\n  };\n\n  addFeedback = (field) => {\n    this.setState((prevState) => {\n      return {\n        [field]: prevState[field] + 1,\n      };\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions onLeaveFeedback={this.addFeedback} />\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./Components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}